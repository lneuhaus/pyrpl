redpitaya:
  hostname: 10.214.1.20
  password: root
  user: root
  port: 2222
  frequency_correction: 1.0
  filename: fpga//red_pitaya.bin
  reloadfpga: true
  # autostart gui?
  gui: true
  monitor_server_name: pyrpl

general:
  # name of this device
  name: homodyne
  # level of logged information.
  # 'debug' outputs everything
  # 'infi' is default level
  # 'warning' only shows warnings and errors
  # 'error' only shows errors
  loglevel: info
  # import CurveDB class from which module? if missing, it's pyrpl.curvedb

# most important section that defines how the lockbox understands the
# real-world system
model:
  # use class Interferometer for internal model and lock algorithms
  # upper- or lowercase spelling is accepted if there is no ambiguity
  modeltype: interferometer
  # only needed parameter is wavelength
  # (to convert piezo displacement into gain)
  wavelength: 1.064e-06
  # maximum tolerated error of the internal variable
  # for interferometer, this is the phase error in radians
  # this value is uniquely needed for the function 'islocked'
  lock0:
    error_threshold: 11.0  # 1 degree works except for minimum_transmission!!
    stages:
      call_unlock: {}
      start:
        input: transmission
        factor: 0.1
        phase: 0
        outputs:
        - piezo
        setup_iir: true
        time: 0.1
      finish:
        input: transmission
        factor: 1.0
        phase: 0
        outputs:
        - piezo
        setup_iir: true
  #lock_iq:
  lock:
    error_threshold: 11.0  # 1 degree works except for minimum_transmission!!
    stages:
      call_unlock: {}
      start:
        input: iq
        factor: 0.1
        phase: 90
        outputs:
        - piezo
        setup_iir: true
        time: 0.1
      finish:
        input: iq
        factor: 1.0
        phase: 90
        outputs:
        - piezo
        setup_iir: true

# all signals that are inputs of the lockbox. Must be signal names understood
# by the model
inputs:
  # Only 1 photodiode at interferometer port 1 is used here.
  # For this inteferometer, we use an imbalanced detection scheme
  # i.e. 90% signal + 10% LO incident on a fast photodiode whos DC port is
  # connected to redpitaya input 1
  transmission:
    unit: V
    redpitaya_input: adc2
    offset: 0.002445228397846222
    max: 0.3116416856646538
    min: -0.3134803846478462
    mean: 0.01334187388420105
    rms: 0.23080065416368709
    curve: 259336
  #transmission_rf:
  #  unit: V
  #  redpitaya_input: adc1
  #  offset: -0.011950388550758362
  #  max: 0.15428437292575836
  #  min: -0.15797148644924164
  #  mean: -0.006110109388828278
  #  rms: 0.09669715565486804
  #  curve: 258021
  iq:
    redpitaya_input: iq0
    setup:
      frequency: 12121212.1
      phase: 320.0
      output_direct: out2
      output_signal: quadrature
      quadrature_factor: 0.016
      input: adc1
      gain: 0
      amplitude: 0.5
      acbandwidth: 2000000.0
      bandwidth: [1000000, 500000]
    max: 0.9998779296875
    min: -1.0
    mean: 0.1259268894791603
    rms: 0.9309827650083359
    curve: 259338
# All output signals. Names of outputs are arbitrary.
outputs:
  # we only have 1 actuator in this interferometer, the piezo in the LO arm
  piezo:
    # output channel where the lopiezo is connected
    redpitaya_output: out1
    # voltage limits
    max_voltage: 1.0
    min_voltage: -1.0
    # we will calibrate the piezo response in units of m_per_V (not a necessary
    # parameter as it can be automatically filled in by the code)
    calibrationunits: m_per_V
    # 7 micron / 100V * 50V/V =
    m_per_V: 3.5e-06
    # PZT Capacity: 42nF
    # Output impedance of HV amplifier: 100 kOhm
    # RC cutoff < 144 kHz: 1/2piRC = 37.9 Hz
    # therefore the analog filter can be well approximated by a first order
    # lowpass with corner frequency 37.9 Hz
    analogfilter:
      lowpass:
      - 2000
    # the piezo manufacturer specifies the first resonance at 144 kHz
    # however, the mounting structure is expected to have resonances starting
    # from 15 kHz. To be safe, we start by demanding a unity-gain frequency
    # of 1 kHz and will later increase this value (automatically done after
    # lock optimisation)
    lock:
      unity_gain_frequency: 100000.0
      inputfilter:
      - 0
      - 0
      - 0
      - 0
    iir:
      curve: 258527  # 258525  # 258377
    sweep:
      waveform: ramp
      frequency: 10.0
      amplitude: 0.95

##############################################################################
###  Configuration parameters that rarely need to be modified ################
##############################################################################

scope:
  input1: adc2
  input2: dac1
  duration: 0.1
  trigger_source: immediately
  average: false

scopegui:
  coordinates:
  - -1647
  - 405
  - 800
  - 600
  auto_run_continuous: true

# default properties for signal acquisition
signal:
  unit: V # can be any of m, Hz, V, raw, ... as long as unit_per_V is defined
  V_per_V: 1.0 # default unit is V
  raw_per_V: 8192.0 # raw units from the FPGA
  # minimum trace duration in seconds
  # be aware that this number affects both the sampling rate and the minimum
  # frequency that can be resolved. Usually, you want to keep duration as long
  # as you can stand to wait for new signal data, typically 10-100 ms.
  duration: 0.1
  # selects whether scope is to be used in average mode
  # false is strongly suggested for duration-independent estimation of rms
  # true is preferred only when we want to get an extremely good mean estimate
  average: false
  # if true, the signal.curve command automatically saves the data to CurveDB
  autosave: true
  # number of points per curve; also the number of points used for mean and rms
  points: 16384
  # default trigger source
  trigger_source: immediately
  trigger_delay: 0
  # timeout determines the time interval within which we do not take another
  # data trace if several parameters are requested. To always obtain fresh
  # data, set this to -1. To enable manual acquisition control with the acquire
  # function '_acquire()', set this to a very large value or to '.inf'.
  acquire_timeout: 0.3
  # if true, the offset is subtraced. Calibrate with signal.get_offset()
  offset_subtraction: true
  offset: 0
  # peak is a reserved place to store the peak value, for example offresonant
  # reflection from a cavity
  peak: 0
  threshold: 0
  hysteresis: 0.002
