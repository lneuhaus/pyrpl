redpitaya:
  hostname: 10.214.1.30
  password: root
  user: root
  port: 2222
  frequency_correction: 1.0
  filename: fpga//red_pitaya.bin
  reloadfpga: true
  # autostart gui?
  gui: true

general:
  # name of this device
  name: heterodyne
  # level of logged information.
  # 'debug' outputs everything
  # 'infi' is default level
  # 'warning' only shows warnings and errors
  # 'error' only shows errors
  loglevel: error
  # import CurveDB class from which module? if missing, it's pyrpl.curvedb
  #curvedb: pyrpl
  curvedb: pyinstruments

# most important section that defines how the lockbox understands the
# real-world system
model:
  # use class Interferometer for internal model and lock algorithms
  # upper- or lowercase spelling is accepted if there is no ambiguity
  modeltype: TEM02FabryPerot
  # only needed parameter is wavelength
  # (to convert piezo displacement into gain)
  wavelength: 1.064e-06
  # maximum tolerated error of the internal variable
  # for interferometer, this is the phase error in radians
  # this value is uniquely needed for the function 'islocked'
  maxerror: 0.1
  #
  calibration_threshold: 0.5
  #
  calibration_zoom: 20
  #
  finesse: 1100


  lock:
    drift_detuning: -2
    drift_offset: -1.0
    drift_timeout: 0.1
    relative_transmission_threshold: 0.06

# all signals that are inputs of the lockbox. Must be signal names understood
# by the model
inputs:
  # Only 1 photodiode at interferometer port 1 is used here.
  # For this inteferometer, we use an imbalanced detection scheme
  # i.e. 90% signal + 10% LO incident on a fast photodiode whose DC port is
  # connected to redpitaya input 1
  tilt:
    redpitaya_input: adc2
    slope_sign: 1
    max: 0.0975341796875
    min: -0.111083984375
  transmission:
    redpitaya_input: adc1

    max: 0.1134033203125
    min: -0.0301513671875
# All output signals. Names of outputs are arbitrary.
outputs:
  # we only have 1 actuator in this interferometer, the piezo in the LO arm
  piezo:
    # output channel where the lopiezo is connected
    redpitaya_output: out1
    # voltage limits
    max_voltage: 1.0
    min_voltage: -1.0
    # we will calibrate the piezo response in units of m_per_V (not a necessary
    # parameter as it can be automatically filled in by the code)
    calibrationunits: m_per_V
    # sweep with 2Vpp input to amplifier gives 1 FSR (532nm) =>
    m_per_V: 2.66e-07
    # PZT Capacity: 42nF
    # Output impedance of HV amplifier: 100 kOhm
    # RC cutoff < 144 kHz: 1/2piRC = 37.9 Hz
    # therefore the analog filter can be well approximated by a first order
    # lowpass with corner frequency 37.9 Hz
    analogfilter:
      lowpass:
      - 20.0
    # the piezo manufacturer specifies the first resonance at 144 kHz
    # however, the mounting structure is expected to have resonances starting
    # from 15 kHz. To be safe, we start by demanding a unity-gain frequency
    # of 1 kHz and will later increase this value (automatically done after
    # lock optimisation)
    unity_gain_frequency: 12500.0
    sweep:
      waveform: ramp
      frequency: 10.0
      amplitude: 1.0

    inputfilter:
    - 19428.09363914738
    - 19428.09363914738
    - 0
    - 0
scope:
  input1: adc1
  input2: dac1
  duration: 0.1
  trigger_source: immediately
  average: false

# default properties for signal acquisition
signal:
  unit: V # can be any of m, Hz, V, raw, ... as long as unit_per_V is defined
  V_per_V: 1.0 # default unit is V
  raw_per_V: 8192.0 # raw units from the FPGA
  # minimum trace duration in seconds
  # be aware that this number affects both the sampling rate and the minimum
  # frequency that can be resolved. Usually, you want to keep duration as long
  # as you can stand to wait for new signal data, typically 10-100 ms.
  duration: 0.1
  # selects whether scope is to be used in average mode
  # false is strongly suggested for duration-independent estimation of rms
  # true is preferred only when we want to get an extremely good mean estimate
  average: false
  # if true, the signal.curve command automatically saves the data to CurveDB
  autosave: true
  # number of points per curve; also the number of points used for mean and rms
  points: 16384
  # default trigger source
  trigger_source: immediately
  # timeout determines the time interval within which we do not take another
  # data trace if several parameters are requested. To always obtain fresh
  # data, set this to -1. To enable manual acquisition control with the acquire
  # function '_acquire()', set this to a very large value or to '.inf'.
  acquire_timeout: 0.3
  # if true, the offset is subtraced. Calibrate with signal.get_offset()
  offset_subtraction: true
  offset: 0
  # peak is a reserved place to store the peak value, for example offresonant
  # reflection from a cavity
  peak: 0
  # default trigger threshold
  threshold: 0
  # default trigger hysteresis
  hysteresis: 0.002
